{"version":3,"sources":["services/ApiPixabay.js","Component/SearchForm/SearchForm.js","Component/Modal/Modal.js","Component/ImageItem/ImageItem.js","Component/ImageGallery/ImageGallery.js","Component/Button/Button.js","App.js","reportWebVitals.js","index.js"],"names":["api","fetchImg","query","page","url","fetch","then","reseponse","ok","json","Promise","reject","Error","SearchForm","onSubmit","useState","setQuery","className","e","preventDefault","trim","toast","type","placeholder","autoComplete","autoFocus","value","onChange","currentTarget","toLowerCase","modalRoot","document","querySelector","Modal","src","alt","onClose","useEffect","window","addEventListener","handleKeydown","removeEventListener","code","createPortal","onClick","target","ImageItem","largeImageURL","showModal","setShowModal","toggleModal","ImageGallery","images","map","img","webformatURL","tags","id","Button","scroll","scrollToBottom","Status","App","error","setError","setPage","status","setStatus","setImages","ApiPixabay","response","hits","length","prevState","catch","newQuery","autoClose","message","color","height","width","timeout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7d69b33d.chunk.js","sourcesContent":["const API_KEY = '23034123-dfb7a22dd10a0f412f945dcd2';\n\nfunction fetchImg(query, page) {\n  const url = `https://pixabay.com/api/?q=${query}&page=${page}&key=${API_KEY}&image_type=photo&orientation=horizontal&per_page=12`;\n  return fetch(url).then(reseponse => {\n    if (reseponse.ok) {\n      return reseponse.json();\n    }\n    return Promise.reject(new Error(`There is no images for ${query}`));\n  });\n}\nconst api = { fetchImg };\nexport default api;\n\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nexport default function SearchForm({ onSubmit }) {\n  const [query, setQuery] = useState('');\n  \n\n  const handleChange = e => {\n    setQuery(e.currentTarget.value.toLowerCase());\n\n    \n  };\n\n const handleSubmit = e => {\n    e.preventDefault();\n    if (query.trim() === '') {\n      toast('Go clearly!');\n      return;\n    }\n\n    onSubmit(query);\n    setQuery( '' );\n  };\n\n  \n    return (\n      <header className=\"Searchbar\">\n        <form className=\"SearchForm\" onSubmit={handleSubmit}>\n          <button type=\"submit\" className=\"SearchForm-button\">\n            <span className=\"SearchForm-button-label\">Try me!</span>\n          </button>\n          <input\n            placeholder=\"lets search smth....\"\n            className=\"SearchForm-input\"\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            value={query}\n            onChange={handleChange}\n          />\n        </form>\n      </header>\n    );\n  \n}\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { createPortal } from 'react-dom';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default function Modal({src, alt, onClose}) {\n  \n  useEffect(() => {\n    window.addEventListener('keydown', handleKeydown);\n    return () => {\n      window.removeEventListener('keydown', handleKeydown);\n    }\n  })\n  \n  const handleKeydown = e => {\n    if (e.code === 'Escape') {\n      onClose();\n    }\n  };\n\n  const handleBackdrop = e => {\n    if (e.currentTarget === e.target) {\n      onClose();\n    }\n  };\n \n    return createPortal(\n      <div onClick={handleBackdrop} className=\"Overlay\">\n        <div className=\"Modal\">\n          <img src={src} alt={alt} />\n        </div>\n      </div>,\n      modalRoot,\n    );\n  \n}\n\nModal.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Modal from 'Component/Modal/Modal';\n\nexport default function ImageItem({ src, alt, largeImageURL }) {\n  const [showModal, setShowModal] = useState(false);\n  const toggleModal = () => {\n    setShowModal(!showModal);\n    \n  };\n\n  \n  \n\n    return (\n      <li className=\"ImageGalleryItem\">\n        <img onClick={toggleModal} alt={alt} src={src} className=\"\" />\n        {showModal && (\n          <Modal onClose={toggleModal} src={largeImageURL} alt={alt} />\n        )}\n      </li>\n    );\n  \n}\n\nImageItem.propTypes = {\n  src: PropTypes.string.isRequired,\n  largeImageURL: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport ImageItem from 'Component/ImageItem/ImageItem';\n\nexport default function ImageGallery({ images }) {\n  return (\n    <ul className=\"ImageGallery\">\n      {images.map(img => (\n        <ImageItem\n          src={img.webformatURL}\n          alt={img.tags}\n          largeImageURL={img.largeImageURL}\n          key={img.id}\n        />\n      ))}\n    </ul>\n  );\n}\n\nImageGallery.propTypes = {\n  images: PropTypes.array.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { animateScroll as scroll } from 'react-scroll';\n\nexport default function Button({ onClick }) {\n  const scrollFunc = () => {\n    onClick();\n    scroll.scrollToBottom();\n  };\n\n \n    return (\n      <button onClick={scrollFunc} className=\"Button\" type=\"button\">\n        Load more\n      </button>\n    );\n  \n}\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport ApiPixabay from 'services/ApiPixabay';\nimport SearchForm from 'Component/SearchForm/SearchForm';\nimport './App.css';\nimport ImageGallery from 'Component/ImageGallery/ImageGallery';\nimport Button from 'Component/Button/Button';\nimport Loader from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n// import ImageItem from 'Component/ImageItem/ImageItem';\n\nconst Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\nexport default function App () {\n\n  const [query, setQuery] = useState('');\n  const [error, setError] = useState(null);\n  const [page, setPage] = useState(1);\n  const [status, setStatus] = useState('idle');\n  const [images, setImages] = useState([]);\n\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n   \n    const renderImg = () => {\n    \n      setStatus(Status.PENDING);\n   \n      ApiPixabay.fetchImg(query, page)\n        .then(response => {\n          const responseLength = response.hits.length;\n\n          if (responseLength === 0) {\n            setError(new Error(`No search results for ${query}`));\n            setStatus(Status.REJECTED);\n          \n            return;\n          }\n\n          setImages(prevState => ([...images, ...response.hits]));\n        \n          setStatus(Status.RESOLVED);\n\n        \n        })\n\n        .catch(error => {\n          setError(error); setStatus(Status.REJECTED)\n        });\n      \n    };\nrenderImg();\n  }, [page, query]);\n\n  const onLoad = () => {\n    setPage(prevState => prevState + 1);\n  };\n\n  const handleFormSubmit = newQuery => {\n    if (newQuery === query) {\n      return;\n    }\n    setQuery(newQuery);\n    setPage(1);\n    setImages([]);\n\n    \n  };\n\n \n\n \n   \n\n    return (\n      <div className=\"App\">\n        <SearchForm onSubmit={handleFormSubmit}></SearchForm>\n        <ToastContainer autoClose={4000} />\n        {status === Status.IDLE && (\n          <div className=\"imgGreet\">\n            Hello=)\n            \n          </div>\n        )}\n        <ImageGallery images={images} />\n        {status === Status.REJECTED && (\n          <div className=\"imgGreet\">\n            {error.message}\n            <img\n              src=\"https://cdn.pixabay.com/photo/2016/02/19/10/13/pug-1209129_960_720.jpg\"\n              alt=\"\"\n            />\n          </div>\n        )}\n        {status === Status.PENDING && (\n          <Loader\n            type=\"Puff\"\n            color=\"#3fb566\"\n            height={100}\n            width={200}\n            timeout={3000}\n          />\n        )}\n        {status === Status.RESOLVED && <Button onClick={onLoad} />}\n      </div>\n    );\n  \n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}